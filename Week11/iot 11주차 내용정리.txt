기본 키보드 설정 - Preferences - Mouse and Keyboard Settings - Keyboard Layout - (미국 102키 키보드)

Preferences > Advanced Options > Edit Connections
인터넷 설정 - 어드밴스드 옵션 - EDIT CONNECTIONS -이더넷편집  -IPV4에서 우리가 찍은 아까 알아내 IP 주소 입력, 넷 마스크 입력 






IOT 11주차 내용정리
라즈비안 

===============================================================
1.opencv 설치 전 확인 사항 
	
	의존성 에러가 나면 
		sudo rm /usr/lib/python3.11/EXTERNALLY-MANAGED

2.설치 전에 메모리 용량 스왑잡기

	메모리 확인 - free -m
 
	메모리 용량 늘리기 sudo vim /etc/dphys-swapfile -> CONF_SWAPSIZE 를 2048로 변경 
	sudo systemctl restart dphys-swapfile -> 재시작

3.opencv 설치 (2개의 명령어중 1개만)

	pip install opencv-contrib-python
	sudo apt-get install python3-opencv
	opeecv 설치 후 스왑 메모리 200으로 변경 

3-2. 카메라 정상 작동하는지 코드 작성 후 확인 


4. 텔레그램 봇 만들기
	1. /start
	2. /newbot
	3. 봇이름_bot 으로 이름 짓기
	4. token 복사 
	5. 내가 만든 봇으로 대화 시작 
	6. /set 시간 
	

5. python Telegram API 설치
	pip install python-telegram-bot  --upgrade  --> API 다운
	//pip install python-telegram-bot[job-queue] --pre (옵션이 추가된 명령어)

	git clone https://github.com/python-telegram-bot/python-telegram-bot --recursive
	-> 깃허브에서 코드 다운 
	


6. python-telegram-bot/examples/timerBot.py 코드 수정 
		이렇게 하면 telegram-bot 디렉토리가 생김 여기에서 
		examples-> timerbot.py 로 들어가서 "TOKEN" 안에 토큰 입력  
		examples 디렉토리 안에서 python timerbot.py넣고 실행 
		- 몇 초뒤 폰으로 /set 10 이런 식으로 세팅하면 10초후에 메세지가 하나옴 

		카메라 코드 추가






=================================================================카메라만 실행하기 

카메라의 실시간 미리보기를 띄우고, 사용자가 'q'를 누르면 10초 후에 이미지 한 장을 'image.jpg'로 저장하는 프로그램입니다

import cv2 //이미지 처리를 위해 필요 
import sys  
import time //타임딜레이 할려고 필요


cap = cv2.VideoCapture(0) 처음에 연결된 카메라 켜기 시도 

# 해상도 설정
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# 카메라가 실제로 열렸는데 확인
if not cap.isOpened():  // true false 리턴 
    print('camera open error')
    exit()

# 이 반복문은 사용자가 q를 누르기 전까지 계속 카메라로부터 미리보기 이미지를 읽음
while True:
    ret, image = cap.read()  # 카메라로부터 프레임 읽기 -> ret (true false) , image(미리보기 사진 한장)
    if not ret: # 미리보기 사진이 제대로 안 찍히면
        print('frame read error')
        break
		
    cv2.imshow('CAMERA', image)  # 'CAMERA'라는 창에 프레임 보여주기

    # 1ms 동안 키 입력 대기, 'q' 키 입력 시 종료
    # 비트연산자를 통해 시스템에 관계없이 q 값을 불러올 수 있음 
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# 다음 두 줄은 주석 처리되어 있어 실행되지 않음
# if cv2.waitKey(30)>0:
#     break

time.sleep(10)  # 10초 대기
cv2.imwrite("image.jpg", image)  # 마지막 프레임을 image.jpg로 저장

cap.release()              # 카메라 장치 해제
cv2.destroyAllWindows()    # 모든 OpenCV 윈도우 닫기




================================================================
import logging
import cv2==============================
import time=============================
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# 로깅 설정
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# 사진 찍는 함수 정의
========================================================
def takePhoto():
    cap = cv2.VideoCapture(0)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    if not cap.isOpened():
        print("camera open error")
        return
    ret, image = cap.read()
    if not ret:
        print("frame read error")
        return
    time.sleep(1)
    cv2.imwrite("./image.jpg", image)
    cap.release()
    cv2.destroyAllWindows()
========================================================

# 알람 함수 (봇이 메시지 전송 + 사진 전송)
async def alarm(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send the alarm message."""
    
    =========================================
    takePhoto()
    =========================================
    
    job = context.job
    await context.bot.send_message(job.chat_id, text=f"Beep! {job.data} seconds are over!")
    
    ================================================    
    await context.bot.sendPhoto(job.chat_id, photo=open("./image.jpg", "rb"))
    ================================================


# 타이머 설정 명령어 핸들러 함수
async def set_timer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Add a job to the queue."""
    chat_id = update.effective_message.chat_id
    try:
        # 타이머 시간은 args[0]에 전달됨
        due = float(context.args[0])
        if due < 0:
            await update.effective_message.reply_text("Sorry we can not go back to future!")
            return

        job_removed = remove_job_if_exists(str(chat_id), context)
        ==========================================================
	context.job_queue.run_repeating(alarm, due, chat_id=chat_id, name=str(chat_id), data=due)
	==========================================================
	once or repeating

        text = "Timer successfully set!"
        if job_removed:
            text += " Old one was removed."
        await update.effective_message.reply_text(text)

    except (IndexError, ValueError):
        await update.effective_message.reply_text("Usage: /set <seconds>")





